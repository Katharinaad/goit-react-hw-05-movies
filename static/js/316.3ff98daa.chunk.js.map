{"version":3,"file":"static/js/316.3ff98daa.chunk.js","mappings":"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","sources":["components/MovieDetail/MovieDetail.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["import './MovieDetail.scss';\n\nimport { Link } from 'react-router-dom';\n\nexport const MovieDetail = ({ movie }) => {\n  if (!movie) {\n    return <p>Loading...</p>;\n  }\n  const releaseYear = new Date(movie.release_date).getFullYear();\n\n  const userScore = Math.round(movie.vote_average * 10);\n\n  return (\n    <>\n      <div className=\"movie-detail\">\n        <div className=\"movie-image\">\n          <img\n            src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n            alt={`Poster of ${movie.title}`}\n          />\n        </div>\n        <div className=\"movie-info\">\n          <h1>\n            {movie.title} ({releaseYear})\n          </h1>\n          <p>User Score: {userScore}%</p>\n          <h2>Overview</h2>\n          <p>{movie.overview}</p>\n          <h3>Genres</h3>\n          <p>{movie.genres.map(genre => genre.name).join(', ')}</p>\n        </div>\n      </div>\n      <div className=\"additional-info\">\n        <h4>Additional Information</h4>\n        <ul>\n          <li>\n            <Link to=\"cast\">Cast</Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">Reviews</Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n","import Loader from 'components/Loader/Loader';\nimport { MovieDetail } from 'components/MovieDetail/MovieDetail';\nimport { useEffect, useRef, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieDetailed } from 'services/api';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/movies');\n\n  useEffect(() => {\n    // fetch movie details\n    const fetchMovie = async () => {\n      try {\n        setIsLoading(true);\n        const data = await fetchMovieDetailed(movieId);\n        setMovie(data);\n      } catch (error) {\n        console.log('Error fetching details for the movie:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Link to={backLinkHref.current}>Go Back</Link>\n      <MovieDetail movie={movie} />\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetailsPage;\n"],"names":["MovieDetail","_ref","movie","_jsx","children","releaseYear","Date","release_date","getFullYear","userScore","Math","round","vote_average","_jsxs","_Fragment","className","src","concat","poster_path","alt","title","overview","genres","map","genre","name","join","Link","to","_location$state$from","_location$state","movieId","useParams","_useState","useState","_useState2","_slicedToArray","setMovie","_useState3","_useState4","isLoading","setIsLoading","location","useLocation","backLinkHref","useRef","state","from","useEffect","fetchMovie","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMovieDetailed","sent","t0","console","log","finish","stop","apply","arguments","Loader","current","Outlet"],"sourceRoot":""}