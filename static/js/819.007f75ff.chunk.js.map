{"version":3,"file":"static/js/819.007f75ff.chunk.js","mappings":"oMAmBA,EAhBkB,SAAHA,GAAoB,IAAdC,EAAMD,EAANC,OACbC,GAAWC,EAAAA,EAAAA,MAEjB,OACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SACvBL,EAAOM,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAAK,OACtBN,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAACO,EAAAA,GAAI,CAACC,GAAE,WAAAC,OAAaJ,GAAMK,MAAO,CAAEC,KAAMb,GAAWI,SAClDI,KAFID,EAIJ,KAIb,C,yKCdaO,EAAY,WAAO,IAADC,EAC7BC,GAAwCC,EAAAA,EAAAA,MAAiBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BI,EAAwC,QAAlCP,EAAGK,EAAaG,IAAI,sBAAc,IAAAR,EAAAA,EAAI,GAUlD,OACEb,EAAAA,EAAAA,KAAA,UAAAE,UACEoB,EAAAA,EAAAA,MAAA,QAAMrB,UAAU,cAAcsB,SAVT,SAAAC,GACvBA,EAAMC,iBACN,IAAMC,EAAgBF,EAAMG,cAAcC,SAASC,MAAMC,MAEzDX,EAAgB,CAAEU,MAAOH,IACzBF,EAAMG,cAAcI,OACtB,EAI6D7B,SAAA,EACvDF,EAAAA,EAAAA,KAAA,SACEC,UAAU,eACV+B,KAAK,OACLC,aAAa,MACbC,KAAK,QACLC,YAAY,mBACZC,aAAchB,KAEhBpB,EAAAA,EAAAA,KAAA,UAAQC,UAAU,gBAAgB+B,KAAK,SAAQ9B,SAAC,eAMxD,ECcA,EAlCe,WACb,IAAAmC,GAA4BC,EAAAA,EAAAA,UAAS,IAAGC,GAAAtB,EAAAA,EAAAA,GAAAoB,EAAA,GAAjCxC,EAAM0C,EAAA,GAAEC,EAASD,EAAA,GACxBE,GAAkCH,EAAAA,EAAAA,WAAS,GAAMI,GAAAzB,EAAAA,EAAAA,GAAAwB,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9B5B,GAAsBC,EAAAA,EAAAA,MAChBc,GADiCZ,EAAAA,EAAAA,GAAAH,EAAA,GAArB,GACQO,IAAI,SAoB9B,OAlBAwB,EAAAA,EAAAA,YAAU,WACR,GAAIhB,EAAO,CAET,IAAMiB,EAAS,eAAAlD,GAAAmD,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEK,OAFLF,EAAAC,KAAA,EAEdR,GAAa,GAAMO,EAAAE,KAAA,GACAC,EAAAA,EAAAA,IAAkBzB,GAAO,KAAD,EAArCqB,EAAIC,EAAAI,KACVf,GAASgB,EAAAA,EAAAA,GAAKN,EAAKO,UAAUN,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAE7BQ,QAAQC,IAAI,uBAAsBT,EAAAO,IAAS,QAEvB,OAFuBP,EAAAC,KAAA,GAE3CR,GAAa,GAAOO,EAAAU,OAAA,6BAAAV,EAAAW,OAAA,GAAAb,EAAA,wBAEvB,kBAVc,OAAArD,EAAAmE,MAAA,KAAAC,UAAA,KAWflB,GACF,CACF,GAAG,CAACjB,KAGFP,EAAAA,EAAAA,MAAA2C,EAAAA,SAAA,CAAA/D,SAAA,CACGyC,IAAa3C,EAAAA,EAAAA,KAACkE,EAAAA,EAAM,KACrBlE,EAAAA,EAAAA,KAACY,EAAS,KAEVZ,EAAAA,EAAAA,KAACmE,EAAAA,EAAS,CAACtE,OAAQA,MAGzB,C","sources":["components/MovieList/MovieList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport './MovieList.scss';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul className=\"movie-list\">\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import { useSearchParams } from 'react-router-dom';\nimport './Searchbar.scss';\n\nexport const Searchbar = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const search = searchParams.get('searchQuery') ?? '';\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const searchedValue = event.currentTarget.elements.query.value;\n\n    setSearchParams({ query: searchedValue });\n    event.currentTarget.reset();\n  };\n\n  return (\n    <header>\n      <form className=\"search-form\" onSubmit={handleFormSubmit}>\n        <input\n          className=\"search-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          name=\"query\"\n          placeholder=\"Search movies...\"\n          defaultValue={search}\n        />\n        <button className=\"search-button\" type=\"submit\">\n          Search\n        </button>\n      </form>\n    </header>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchMoviesSearch } from '../../services/api';\nimport MovieList from 'components/MovieList/MovieList';\nimport Loader from 'components/Loader/Loader';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\n\n// import {\n//   NotificationManager,\n//   NotificationContainer,\n// } from 'react-notifications';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParam] = useSearchParams();\n  const query = searchParam.get('query');\n\n  useEffect(() => {\n    if (query) {\n      //only fetch if there is a query\n      const fetchData = async () => {\n        try {\n          setIsLoading(true);\n          const data = await fetchMoviesSearch(query);\n          setMovies([...data.results]);\n        } catch (error) {\n          console.log('No such movie found:', error);\n        } finally {\n          setIsLoading(false);\n        }\n      };\n      fetchData();\n    }\n  }, [query]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <Searchbar />\n\n      <MovieList movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["_ref","movies","location","useLocation","_jsx","className","children","map","_ref2","id","title","Link","to","concat","state","from","Searchbar","_searchParams$get","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","searchParams","setSearchParams","search","get","_jsxs","onSubmit","event","preventDefault","searchedValue","currentTarget","elements","query","value","reset","type","autoComplete","name","placeholder","defaultValue","_useState","useState","_useState2","setMovies","_useState3","_useState4","isLoading","setIsLoading","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","fetchMoviesSearch","sent","_toConsumableArray","results","t0","console","log","finish","stop","apply","arguments","_Fragment","Loader","MovieList"],"sourceRoot":""}